name: CI Core Workflow

# Controls when the action will run.
on:
  push:
    tags:
      - v*

jobs:
  build-android:
    # Configuration
    name: "Android AAR  üîó "
    env:
      GO111MODULE: on
      GOMOD: ${{ github.workspace }}/go.mod
      MOD_CACHE: ~/go/pkg/mod
      BUILD_CACHE: ~/.cache/go-build
    runs-on: ubuntu-latest

    # Steps
    steps:
      # 1. Checkout the branch
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # 2. Setup Go environment
      - name: Setup Go Env
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # 4. Bind Android Framework to Plugin
      - name: Setup and Bind AAR
        run: |
          mkdir -p ${{ github.workspace }}/build
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          cd ${{ github.workspace }}/cmd/bind
          gomobile bind -ldflags='-s -w' -v -target=android -o ${{ github.workspace }}/build/io.sonr.core.aar

      # 5. Upload AAR
      - name: Upload AAR to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: android-aar
          path: ${{ github.workspace }}/build/io.sonr.core.aar

  # Bind iOS Framework
  build-ios:
    # Configuration
    name: "iOS Framework  üîó "
    env:
      GO111MODULE: on
      GOMOD: ${{ github.workspace }}/go.mod
      MOD_CACHE: ~/go/pkg/mod
      BUILD_CACHE: ~/Library/Caches/go-build
    runs-on: macos-latest

    # Steps
    steps:
      # 1. Checkout the branch
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # 2. Setup Go environment
      - name: Setup Go Env
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # 4. Bind iOS Framework to Plugin
      - name: Setup and Bind
        run: |
          mkdir -p ${{ github.workspace }}/build
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          cd ${{ github.workspace }}/cmd/bind
          gomobile bind -ldflags='-s -w' -v -target=ios -bundleid=io.sonr.core -o ${{ github.workspace }}/build/Core.framework

      # 5. Upload Framework
      - name: Upload Framework to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: ios-framework
          path: ${{ github.workspace }}/build/Core.framework/

  # Build Daemon for Desktops
  build-rpc:
    # Configuration
    name: "RPC Daemon  üî® "
    runs-on: macos-latest
    env:
      MOD_CACHE: ~/go/pkg/mod
      BUILD_CACHE: ~/Library/Caches/go-build

    # Steps
    steps:
      # 1. Checkout the branch
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # 2. Setup Go Enviornment
      - name: Setup Go Env
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # 3. Cache Go Modules
      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: |
            $MOD_CACHE
            $BUILD_CACHE
          key: ${{ runner.os }}-go-1_17-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1_17-

      # 4. Build Daemon
      - name: Release Daemons üéâ
        uses: goreleaser/goreleaser-action@v2
        with:
          workdir: ${{ github.workspace }}/cmd/rpc
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}

      # 5. Get Version
      - id: get_version
        uses: battila7/get-version-action@v2

      # 6. Dispatch Electron
      - name: Call Dispatch for Electron ‚ö°Ô∏è
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{secrets.PAT_GITHUB_TOKEN}}
          repository: sonr-io/electron
          event-type: build-electron
          client-payload: '{"version":"${{ steps.get_version.outputs.version-without-v }}"}'

  # Add Frameworks to Release
  release-frameworks:
    # Configuration
    needs: [build-android, build-ios]
    name: "Release Frameworks üéâ "
    runs-on: ubuntu-latest
    if: success()

    # Steps
    steps:
      # 1. Checkout the branch
    - uses: actions/checkout@v2
    - run: mkdir -p ${{ github.workspace }}/build/Core.framework

      # 2. Download AAR Artifact
    - name: Download Android AAR
      uses: actions/download-artifact@v2
      with:
        name: android-aar
        path: ${{ github.workspace }}/build

      # 3. Download Framework Artifact
    - name: Download iOS Framework
      uses: actions/download-artifact@v2
      with:
        name: ios-framework
        path: ${{ github.workspace }}/build/Core.framework

      # 4. Get Version
    - id: get_version
      uses: battila7/get-version-action@v2

      # 5. Zip Framework and AAR
    - name: Zip Android AAR and iOS Framework
      run: |
        cd ${{ github.workspace }}/build
        zip -r $ANDROID_ZIP io.sonr.core.aar
        zip -r $IOS_ZIP Core.framework
      env:
        ANDROID_ZIP: sonr-bind_${{ steps.get_version.outputs.version-without-v }}_android.zip
        IOS_ZIP: sonr-bind_${{ steps.get_version.outputs.version-without-v }}_ios.zip

      # 6. Upload AAR and Framework to Release
    - uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: "${{ github.workspace }}/build/*.zip"
        replacesArtifacts: false
        token: ${{ secrets.PAT_GITHUB_TOKEN }}

    - name: Call Dispatch for Plugin ‚ö°Ô∏è
      uses: peter-evans/repository-dispatch@v1
      with:
          token: ${{secrets.PAT_GITHUB_TOKEN}}
          repository: sonr-io/plugin
          event-type: update-plugin
          client-payload: '{"version":"${{ steps.get_version.outputs.version-without-v }}"}'
