// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MotorServiceClient is the client API for MotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotorServiceClient interface {
	// Node Methods
	// Respond Method to an Invite with Decision
	Share(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareResponse, error)
	// Respond Method to an Invite with Decision
	Decide(ctx context.Context, in *DecideRequest, opts ...grpc.CallOption) (*DecideResponse, error)
	// Search Method to find a Peer by SName or PeerID
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Events Streams
	// Returns a stream of Lobby Refresh Events
	OnLobbyRefresh(ctx context.Context, in *OnLobbyRefreshRequest, opts ...grpc.CallOption) (MotorService_OnLobbyRefreshClient, error)
	// Returns a stream of Mailbox Message Events
	OnMailboxMessage(ctx context.Context, in *OnMailboxMessageRequest, opts ...grpc.CallOption) (MotorService_OnMailboxMessageClient, error)
	// Returns a stream of DecisionEvent's for Accepted Invites
	OnTransmitDecision(ctx context.Context, in *OnTransmitDecisionRequest, opts ...grpc.CallOption) (MotorService_OnTransmitDecisionClient, error)
	// Returns a stream of DecisionEvent's for Invites
	OnTransmitInvite(ctx context.Context, in *OnTransmitInviteRequest, opts ...grpc.CallOption) (MotorService_OnTransmitInviteClient, error)
	// Returns a stream of ProgressEvent's for Sessions
	OnTransmitProgress(ctx context.Context, in *OnTransmitProgressRequest, opts ...grpc.CallOption) (MotorService_OnTransmitProgressClient, error)
	// Returns a stream of Completed Transfers
	OnTransmitComplete(ctx context.Context, in *OnTransmitCompleteRequest, opts ...grpc.CallOption) (MotorService_OnTransmitCompleteClient, error)
}

type motorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotorServiceClient(cc grpc.ClientConnInterface) MotorServiceClient {
	return &motorServiceClient{cc}
}

func (c *motorServiceClient) Share(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareResponse, error) {
	out := new(ShareResponse)
	err := c.cc.Invoke(ctx, "/node.motor.v1.MotorService/Share", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Decide(ctx context.Context, in *DecideRequest, opts ...grpc.CallOption) (*DecideResponse, error) {
	out := new(DecideResponse)
	err := c.cc.Invoke(ctx, "/node.motor.v1.MotorService/Decide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/node.motor.v1.MotorService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) OnLobbyRefresh(ctx context.Context, in *OnLobbyRefreshRequest, opts ...grpc.CallOption) (MotorService_OnLobbyRefreshClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[0], "/node.motor.v1.MotorService/OnLobbyRefresh", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnLobbyRefreshClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnLobbyRefreshClient interface {
	Recv() (*OnLobbyRefreshResponse, error)
	grpc.ClientStream
}

type motorServiceOnLobbyRefreshClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnLobbyRefreshClient) Recv() (*OnLobbyRefreshResponse, error) {
	m := new(OnLobbyRefreshResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnMailboxMessage(ctx context.Context, in *OnMailboxMessageRequest, opts ...grpc.CallOption) (MotorService_OnMailboxMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[1], "/node.motor.v1.MotorService/OnMailboxMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnMailboxMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnMailboxMessageClient interface {
	Recv() (*OnMailboxMessageResponse, error)
	grpc.ClientStream
}

type motorServiceOnMailboxMessageClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnMailboxMessageClient) Recv() (*OnMailboxMessageResponse, error) {
	m := new(OnMailboxMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitDecision(ctx context.Context, in *OnTransmitDecisionRequest, opts ...grpc.CallOption) (MotorService_OnTransmitDecisionClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[2], "/node.motor.v1.MotorService/OnTransmitDecision", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitDecisionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitDecisionClient interface {
	Recv() (*OnTransmitDecisionResponse, error)
	grpc.ClientStream
}

type motorServiceOnTransmitDecisionClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitDecisionClient) Recv() (*OnTransmitDecisionResponse, error) {
	m := new(OnTransmitDecisionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitInvite(ctx context.Context, in *OnTransmitInviteRequest, opts ...grpc.CallOption) (MotorService_OnTransmitInviteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[3], "/node.motor.v1.MotorService/OnTransmitInvite", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitInviteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitInviteClient interface {
	Recv() (*OnTransmitInviteResponse, error)
	grpc.ClientStream
}

type motorServiceOnTransmitInviteClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitInviteClient) Recv() (*OnTransmitInviteResponse, error) {
	m := new(OnTransmitInviteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitProgress(ctx context.Context, in *OnTransmitProgressRequest, opts ...grpc.CallOption) (MotorService_OnTransmitProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[4], "/node.motor.v1.MotorService/OnTransmitProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitProgressClient interface {
	Recv() (*OnTransmitProgressResponse, error)
	grpc.ClientStream
}

type motorServiceOnTransmitProgressClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitProgressClient) Recv() (*OnTransmitProgressResponse, error) {
	m := new(OnTransmitProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitComplete(ctx context.Context, in *OnTransmitCompleteRequest, opts ...grpc.CallOption) (MotorService_OnTransmitCompleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[5], "/node.motor.v1.MotorService/OnTransmitComplete", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitCompleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitCompleteClient interface {
	Recv() (*OnTransmitCompleteResponse, error)
	grpc.ClientStream
}

type motorServiceOnTransmitCompleteClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitCompleteClient) Recv() (*OnTransmitCompleteResponse, error) {
	m := new(OnTransmitCompleteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MotorServiceServer is the server API for MotorService service.
// All implementations should embed UnimplementedMotorServiceServer
// for forward compatibility
type MotorServiceServer interface {
	// Node Methods
	// Respond Method to an Invite with Decision
	Share(context.Context, *ShareRequest) (*ShareResponse, error)
	// Respond Method to an Invite with Decision
	Decide(context.Context, *DecideRequest) (*DecideResponse, error)
	// Search Method to find a Peer by SName or PeerID
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Events Streams
	// Returns a stream of Lobby Refresh Events
	OnLobbyRefresh(*OnLobbyRefreshRequest, MotorService_OnLobbyRefreshServer) error
	// Returns a stream of Mailbox Message Events
	OnMailboxMessage(*OnMailboxMessageRequest, MotorService_OnMailboxMessageServer) error
	// Returns a stream of DecisionEvent's for Accepted Invites
	OnTransmitDecision(*OnTransmitDecisionRequest, MotorService_OnTransmitDecisionServer) error
	// Returns a stream of DecisionEvent's for Invites
	OnTransmitInvite(*OnTransmitInviteRequest, MotorService_OnTransmitInviteServer) error
	// Returns a stream of ProgressEvent's for Sessions
	OnTransmitProgress(*OnTransmitProgressRequest, MotorService_OnTransmitProgressServer) error
	// Returns a stream of Completed Transfers
	OnTransmitComplete(*OnTransmitCompleteRequest, MotorService_OnTransmitCompleteServer) error
}

// UnimplementedMotorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMotorServiceServer struct {
}

func (UnimplementedMotorServiceServer) Share(context.Context, *ShareRequest) (*ShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (UnimplementedMotorServiceServer) Decide(context.Context, *DecideRequest) (*DecideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decide not implemented")
}
func (UnimplementedMotorServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMotorServiceServer) OnLobbyRefresh(*OnLobbyRefreshRequest, MotorService_OnLobbyRefreshServer) error {
	return status.Errorf(codes.Unimplemented, "method OnLobbyRefresh not implemented")
}
func (UnimplementedMotorServiceServer) OnMailboxMessage(*OnMailboxMessageRequest, MotorService_OnMailboxMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method OnMailboxMessage not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitDecision(*OnTransmitDecisionRequest, MotorService_OnTransmitDecisionServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitDecision not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitInvite(*OnTransmitInviteRequest, MotorService_OnTransmitInviteServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitInvite not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitProgress(*OnTransmitProgressRequest, MotorService_OnTransmitProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitProgress not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitComplete(*OnTransmitCompleteRequest, MotorService_OnTransmitCompleteServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitComplete not implemented")
}

// UnsafeMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotorServiceServer will
// result in compilation errors.
type UnsafeMotorServiceServer interface {
	mustEmbedUnimplementedMotorServiceServer()
}

func RegisterMotorServiceServer(s grpc.ServiceRegistrar, srv MotorServiceServer) {
	s.RegisterService(&MotorService_ServiceDesc, srv)
}

func _MotorService_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.motor.v1.MotorService/Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Share(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Decide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Decide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.motor.v1.MotorService/Decide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Decide(ctx, req.(*DecideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.motor.v1.MotorService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_OnLobbyRefresh_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnLobbyRefreshRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnLobbyRefresh(m, &motorServiceOnLobbyRefreshServer{stream})
}

type MotorService_OnLobbyRefreshServer interface {
	Send(*OnLobbyRefreshResponse) error
	grpc.ServerStream
}

type motorServiceOnLobbyRefreshServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnLobbyRefreshServer) Send(m *OnLobbyRefreshResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnMailboxMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnMailboxMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnMailboxMessage(m, &motorServiceOnMailboxMessageServer{stream})
}

type MotorService_OnMailboxMessageServer interface {
	Send(*OnMailboxMessageResponse) error
	grpc.ServerStream
}

type motorServiceOnMailboxMessageServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnMailboxMessageServer) Send(m *OnMailboxMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitDecision_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnTransmitDecisionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitDecision(m, &motorServiceOnTransmitDecisionServer{stream})
}

type MotorService_OnTransmitDecisionServer interface {
	Send(*OnTransmitDecisionResponse) error
	grpc.ServerStream
}

type motorServiceOnTransmitDecisionServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitDecisionServer) Send(m *OnTransmitDecisionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitInvite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnTransmitInviteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitInvite(m, &motorServiceOnTransmitInviteServer{stream})
}

type MotorService_OnTransmitInviteServer interface {
	Send(*OnTransmitInviteResponse) error
	grpc.ServerStream
}

type motorServiceOnTransmitInviteServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitInviteServer) Send(m *OnTransmitInviteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnTransmitProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitProgress(m, &motorServiceOnTransmitProgressServer{stream})
}

type MotorService_OnTransmitProgressServer interface {
	Send(*OnTransmitProgressResponse) error
	grpc.ServerStream
}

type motorServiceOnTransmitProgressServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitProgressServer) Send(m *OnTransmitProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitComplete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnTransmitCompleteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitComplete(m, &motorServiceOnTransmitCompleteServer{stream})
}

type MotorService_OnTransmitCompleteServer interface {
	Send(*OnTransmitCompleteResponse) error
	grpc.ServerStream
}

type motorServiceOnTransmitCompleteServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitCompleteServer) Send(m *OnTransmitCompleteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MotorService_ServiceDesc is the grpc.ServiceDesc for MotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.motor.v1.MotorService",
	HandlerType: (*MotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Share",
			Handler:    _MotorService_Share_Handler,
		},
		{
			MethodName: "Decide",
			Handler:    _MotorService_Decide_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MotorService_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnLobbyRefresh",
			Handler:       _MotorService_OnLobbyRefresh_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnMailboxMessage",
			Handler:       _MotorService_OnMailboxMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitDecision",
			Handler:       _MotorService_OnTransmitDecision_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitInvite",
			Handler:       _MotorService_OnTransmitInvite_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitProgress",
			Handler:       _MotorService_OnTransmitProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitComplete",
			Handler:       _MotorService_OnTransmitComplete_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node/motor/v1/motor.proto",
}
