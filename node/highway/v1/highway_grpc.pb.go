// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HighwayServiceClient is the client API for HighwayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HighwayServiceClient interface {
	// Register creates new user in DNS Table
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (HighwayService_ListPeersClient, error)
	// Register creates new user in DNS Table
	DecideExchange(ctx context.Context, in *DecideExchangeRequest, opts ...grpc.CallOption) (*DecideExchangeResponse, error)
	// Register creates new user in DNS Table
	SendExchange(ctx context.Context, in *SendExchangeRequest, opts ...grpc.CallOption) (*SendExchangeResponse, error)
	// Register creates new user in DNS Table
	CacheRecord(ctx context.Context, in *CacheRecordRequest, opts ...grpc.CallOption) (*CacheRecordResponse, error)
	// Register creates new user in DNS Table
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	// Register creates new user in DNS Table
	StoreRecord(ctx context.Context, in *StoreRecordRequest, opts ...grpc.CallOption) (*StoreRecordResponse, error)
	// Register creates new user in DNS Table
	RegisterName(ctx context.Context, in *RegisterNameRequest, opts ...grpc.CallOption) (*RegisterNameResponse, error)
	// Authorize Signing Method Request for Data
	VerifyName(ctx context.Context, in *VerifyNameRequest, opts ...grpc.CallOption) (*VerifyNameResponse, error)
}

type highwayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHighwayServiceClient(cc grpc.ClientConnInterface) HighwayServiceClient {
	return &highwayServiceClient{cc}
}

func (c *highwayServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (HighwayService_ListPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayService_ServiceDesc.Streams[0], "/node.highway.v1.HighwayService/ListPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayServiceListPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayService_ListPeersClient interface {
	Recv() (*ListPeersResponse, error)
	grpc.ClientStream
}

type highwayServiceListPeersClient struct {
	grpc.ClientStream
}

func (x *highwayServiceListPeersClient) Recv() (*ListPeersResponse, error) {
	m := new(ListPeersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayServiceClient) DecideExchange(ctx context.Context, in *DecideExchangeRequest, opts ...grpc.CallOption) (*DecideExchangeResponse, error) {
	out := new(DecideExchangeResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/DecideExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) SendExchange(ctx context.Context, in *SendExchangeRequest, opts ...grpc.CallOption) (*SendExchangeResponse, error) {
	out := new(SendExchangeResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/SendExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) CacheRecord(ctx context.Context, in *CacheRecordRequest, opts ...grpc.CallOption) (*CacheRecordResponse, error) {
	out := new(CacheRecordResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/CacheRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) StoreRecord(ctx context.Context, in *StoreRecordRequest, opts ...grpc.CallOption) (*StoreRecordResponse, error) {
	out := new(StoreRecordResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/StoreRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) RegisterName(ctx context.Context, in *RegisterNameRequest, opts ...grpc.CallOption) (*RegisterNameResponse, error) {
	out := new(RegisterNameResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/RegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) VerifyName(ctx context.Context, in *VerifyNameRequest, opts ...grpc.CallOption) (*VerifyNameResponse, error) {
	out := new(VerifyNameResponse)
	err := c.cc.Invoke(ctx, "/node.highway.v1.HighwayService/VerifyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HighwayServiceServer is the server API for HighwayService service.
// All implementations should embed UnimplementedHighwayServiceServer
// for forward compatibility
type HighwayServiceServer interface {
	// Register creates new user in DNS Table
	ListPeers(*ListPeersRequest, HighwayService_ListPeersServer) error
	// Register creates new user in DNS Table
	DecideExchange(context.Context, *DecideExchangeRequest) (*DecideExchangeResponse, error)
	// Register creates new user in DNS Table
	SendExchange(context.Context, *SendExchangeRequest) (*SendExchangeResponse, error)
	// Register creates new user in DNS Table
	CacheRecord(context.Context, *CacheRecordRequest) (*CacheRecordResponse, error)
	// Register creates new user in DNS Table
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	// Register creates new user in DNS Table
	StoreRecord(context.Context, *StoreRecordRequest) (*StoreRecordResponse, error)
	// Register creates new user in DNS Table
	RegisterName(context.Context, *RegisterNameRequest) (*RegisterNameResponse, error)
	// Authorize Signing Method Request for Data
	VerifyName(context.Context, *VerifyNameRequest) (*VerifyNameResponse, error)
}

// UnimplementedHighwayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHighwayServiceServer struct {
}

func (UnimplementedHighwayServiceServer) ListPeers(*ListPeersRequest, HighwayService_ListPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedHighwayServiceServer) DecideExchange(context.Context, *DecideExchangeRequest) (*DecideExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideExchange not implemented")
}
func (UnimplementedHighwayServiceServer) SendExchange(context.Context, *SendExchangeRequest) (*SendExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendExchange not implemented")
}
func (UnimplementedHighwayServiceServer) CacheRecord(context.Context, *CacheRecordRequest) (*CacheRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheRecord not implemented")
}
func (UnimplementedHighwayServiceServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedHighwayServiceServer) StoreRecord(context.Context, *StoreRecordRequest) (*StoreRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRecord not implemented")
}
func (UnimplementedHighwayServiceServer) RegisterName(context.Context, *RegisterNameRequest) (*RegisterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterName not implemented")
}
func (UnimplementedHighwayServiceServer) VerifyName(context.Context, *VerifyNameRequest) (*VerifyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyName not implemented")
}

// UnsafeHighwayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HighwayServiceServer will
// result in compilation errors.
type UnsafeHighwayServiceServer interface {
	mustEmbedUnimplementedHighwayServiceServer()
}

func RegisterHighwayServiceServer(s grpc.ServiceRegistrar, srv HighwayServiceServer) {
	s.RegisterService(&HighwayService_ServiceDesc, srv)
}

func _HighwayService_ListPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPeersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayServiceServer).ListPeers(m, &highwayServiceListPeersServer{stream})
}

type HighwayService_ListPeersServer interface {
	Send(*ListPeersResponse) error
	grpc.ServerStream
}

type highwayServiceListPeersServer struct {
	grpc.ServerStream
}

func (x *highwayServiceListPeersServer) Send(m *ListPeersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayService_DecideExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).DecideExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/DecideExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).DecideExchange(ctx, req.(*DecideExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_SendExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).SendExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/SendExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).SendExchange(ctx, req.(*SendExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_CacheRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).CacheRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/CacheRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).CacheRecord(ctx, req.(*CacheRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_StoreRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).StoreRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/StoreRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).StoreRecord(ctx, req.(*StoreRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_RegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).RegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/RegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).RegisterName(ctx, req.(*RegisterNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_VerifyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).VerifyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.highway.v1.HighwayService/VerifyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).VerifyName(ctx, req.(*VerifyNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HighwayService_ServiceDesc is the grpc.ServiceDesc for HighwayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HighwayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.highway.v1.HighwayService",
	HandlerType: (*HighwayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecideExchange",
			Handler:    _HighwayService_DecideExchange_Handler,
		},
		{
			MethodName: "SendExchange",
			Handler:    _HighwayService_SendExchange_Handler,
		},
		{
			MethodName: "CacheRecord",
			Handler:    _HighwayService_CacheRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _HighwayService_GetRecord_Handler,
		},
		{
			MethodName: "StoreRecord",
			Handler:    _HighwayService_StoreRecord_Handler,
		},
		{
			MethodName: "RegisterName",
			Handler:    _HighwayService_RegisterName_Handler,
		},
		{
			MethodName: "VerifyName",
			Handler:    _HighwayService_VerifyName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPeers",
			Handler:       _HighwayService_ListPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node/highway/v1/highway.proto",
}
