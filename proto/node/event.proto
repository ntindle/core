syntax = "proto3";

package sonr.api;
import "proto/common/core.proto";
import "proto/common/data.proto";
option go_package = "github.com/sonr-io/core/node/api";

// DecisionEvent is emitted when a decision is made by Peer.
message DecisionEvent {
  bool decision = 1;       // true = accept, false = reject
  sonr.core.Peer from = 2; // Peer that made decision
  int64 received = 3;      // Timestamp
}

// Message Sent when peer messages Lobby
message SubscribeEvent {
  string id = 1;                    // OLC Code of Topic
  repeated sonr.core.Peer peers = 2; // User Information
  int64 received = 3;                // Invite received Timestamp
}

// InviteEvent notifies Peer that an Invite has been received
message InviteEvent {
  int64 received = 1;            // Invite received Timestamp
  sonr.core.Peer from = 2;       // Peer that sent the Invite
  sonr.core.Payload payload = 3; // Attached Data
}

// Received Mail Event
message MailboxEvent {
  string id = 1;                    // ID is the Message ID
  bytes buffer = 2;                 // Buffer is the message data
  sonr.core.Profile from = 3;       // Users Peer Data
  sonr.core.Profile to = 4;         // Receivers Peer Data
  sonr.core.Metadata metadata = 5;  // Metadata
}

// Transfer Progress Event
message ProgressEvent {
  double progress = 1; // Current Transfer Progress
  int64 received = 2;  // Timestamp
  int32 current = 3; // Current position of item in list
  int32 total = 4; // Total number of items in list
  sonr.core.Direction direction = 5; // Direction of Transfer
}

// Message Sent after Completed Transfer
message CompleteEvent {
  sonr.core.Direction direction = 1; // Direction of Transfer
  sonr.core.Payload payload = 2;     // Transfer Data
  sonr.core.Peer from = 3; // Peer that sent the Complete Event
  sonr.core.Peer to = 4;   // Peer that received the Complete Event
  int64 createdAt = 5;     // Transfer Created Timestamp
  int64 receivedAt = 6;    // Transfer Received Timestamp
  map<int32, bool> results = 7; // Transfer Success
}

message TransmitEvent {
  sonr.core.Peer from = 1; // Peer that sent the Complete Event
  sonr.core.Peer to = 2;   // Peer that received the Complete Event
  double progress = 3;              // Current Transfer Progress
  Status status = 4; // Status of Transfer

  enum Status {
    PENDING = 0;
    ACCEPTED = 1;
    DECLINED = 2;
    OFFLINE = 3;
    CANCELLED = 4;
    COMPLETE = 5;
  }
}
