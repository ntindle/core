/// This file contains service for the Node RPC Server
syntax = "proto3";

package sonr.node;
import "proto/node/api.proto";
import "proto/node/event.proto";
option go_package = "github.com/sonr-io/core/node/motor";

message Empty {}

// RPC Service with Equivalent Methods of a binded Node
service MotorStub {
  // Send sends an Invite to Exchange to given Peer
  rpc Send(sonr.api.ShareRequest) returns (stream sonr.api.TransmitEvent) {}

  // Decide responds to Exchange Invite from Peer given ID
  rpc Decide(sonr.api.RespondRequest) returns (stream sonr.api.ProgressEvent) {}

  // Subscribe responds to Exchange Invite from Peer given ID
  rpc Subscribe(sonr.api.SubscribeRequest) returns (stream sonr.api.SubscribeEvent) {}

  // Search Method to find a Peer by SName or PeerID
  rpc Search(sonr.api.SearchRequest) returns (sonr.api.SearchResponse) {}

  // Events Streams
  // Returns a stream of Lobby Refresh Events
  rpc OnLobbyRefresh(Empty) returns (stream sonr.api.SubscribeEvent) {}

  // Returns a stream of Mailbox Message Events
  rpc OnMailboxMessage(Empty) returns (stream sonr.api.MailboxEvent) {}

  // Returns a stream of DecisionEvent's for Accepted Invites
  rpc OnTransmitAccepted(Empty) returns (stream sonr.api.DecisionEvent) {}

  // Returns a stream of DecisionEvent's for Rejected Invites
  rpc OnTransmitDeclined(Empty) returns (stream sonr.api.DecisionEvent) {}

  // Returns a stream of DecisionEvent's for Invites
  rpc OnTransmitInvite(Empty) returns (stream sonr.api.InviteEvent) {}

  // Returns a stream of ProgressEvent's for Sessions
  rpc OnTransmitProgress(Empty) returns (stream sonr.api.ProgressEvent) {}

  // Returns a stream of Completed Transfers
  rpc OnTransmitComplete(Empty) returns (stream sonr.api.CompleteEvent) {}
}
