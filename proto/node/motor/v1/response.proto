/// This file contains service for the Node RPC Server
syntax = "proto3";

package node.motor.v1;
import "common/v1/core.proto";
import "common/v1/data.proto";

option go_package = "github.com/sonr-io/core/types/go/node/motor/v1";



// (Client) ShareResponse is response to ShareRequest
message ShareResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// (Client) RespondResponse is response to RespondRequest
message DecideResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// (Client) SearchResponse is Message for Searching for Peer
message SearchResponse {
  bool success = 1;        // Success
  string error = 2;        // Error Message
  common.v1.Peer peer = 3; // Peer Data
  string peer_id = 4;       // Peer ID
  string s_name = 5;        // SName
}


// DecisionEvent is emitted when a decision is made by Peer.
message OnTransmitDecisionResponse {
  bool decision = 1;       // true = accept, false = reject
  common.v1.Peer from = 2; // Peer that made decision
  int64 received = 3;      // Timestamp
}

// Message Sent when peer messages Lobby
message OnLobbyRefreshResponse {
  string olc = 1;                    // OLC Code of Topic
  repeated common.v1.Peer peers = 2; // User Information
  int64 received = 3;                // Invite received Timestamp
}

// InviteEvent notifies Peer that an Invite has been received
message OnTransmitInviteResponse {
  int64 received = 1;            // Invite received Timestamp
  common.v1.Peer from = 2;       // Peer that sent the Invite
  common.v1.Payload payload = 3; // Attached Data
}

// Received Mail Event
message OnMailboxMessageResponse {
  string id = 1;                    // ID is the Message ID
  bytes buffer = 2;                 // Buffer is the message data
  common.v1.Profile from = 3;       // Users Peer Data
  common.v1.Profile to = 4;         // Receivers Peer Data
  common.v1.Metadata metadata = 5;  // Metadata
}

// Transfer Progress Event
message OnTransmitProgressResponse {
  double progress = 1; // Current Transfer Progress
  int64 received = 2;  // Timestamp
  int32 current = 3; // Current position of item in list
  int32 total = 4; // Total number of items in list
  common.v1.Direction direction = 5; // Direction of Transfer
}

// Message Sent after Completed Transfer
message OnTransmitCompleteResponse {
  common.v1.Direction direction = 1; // Direction of Transfer
  common.v1.Payload payload = 2;     // Transfer Data
  common.v1.Peer from = 3; // Peer that sent the Complete Event
  common.v1.Peer to = 4;   // Peer that received the Complete Event
  int64 created_at = 5;     // Transfer Created Timestamp
  int64 received_at = 6;    // Transfer Received Timestamp
  map<int32, bool> results = 7; // Transfer Success
}
