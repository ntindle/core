syntax = "proto3";

package common.data;
option go_package = "github.com/sonr-io/core/common/data";

// Internet Connection Type
enum Connection {
  CONNECTION_UNSPECIFIED = 0;
  CONNECTION_WIFI = 1;     // Wifi Connection
  CONNECTION_ETHERNET = 2; // Ethernet Connection
  CONNECTION_MOBILE = 3;   // Mobile Connection
  CONNECTION_OFFLINE = 4;  // No Internet Connection
}

// Environment Type Configuration
enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  ENVIRONMENT_DEVELOPMENT = 1; // Development Environment
  ENVIRONMENT_PRODUCTION = 2;  // Production Environment
}

// Location from GeoIP and OLC information
message Location {
  // Location Latitude
  double latitude = 1;

  // Location Longitude
  double longitude = 2;

  // Location Placemark Information - Generated
  Placemark placemark = 3;

  // Last Updated Time
  int64 last_modified = 4;

  // Contains detailed placemark information.
  message Placemark {
    // The name associated with the placemark.
    string name = 1;

    // The street associated with the placemark.
    string street = 2;

    // The abbreviated country name, according to the two letter (alpha-2) [ISO
    // standard](https://www.iso.org/iso-3166-country-codes.html).
    string iso_country_code = 3;

    // The name of the country associated with the placemark.
    string country = 4;

    // The postal code associated with the placemark.
    string postal_code = 5;

    // The name of the state or province associated with the placemark.
    string administrative_area = 6;

    // Additional administrative area information for the placemark.
    string sub_administrative_area = 7;

    // The name of the city associated with the placemark.
    string locality = 8;

    // Additional city-level information for the placemark.
    string sub_locality = 9;

    // The street address associated with the placemark.
    string thoroughfare = 10;

    // Additional street address information for the placemark.
    string sub_thoroughfare = 11;
  }
}

// Shared Metadata for Messages on all Protocols
message Metadata {
  int64 timestamp = 1; // Unix timestamp
  string node_id = 2;   // Node ID
  bytes signature = 3; // Signature of the message
  bytes public_key = 4; // Public Key of the message sender
}

// Standard MIME with Additional Extensions
message MIME {
  Type type = 1;      // Type of File
  string subtype = 2; // Extension of File
  string value = 3;   // Type/Subtype i.e. (image/jpeg)

  enum Type {
    TYPE_UNSPECIFIED = 0;    // Other File Type - If cannot derive from Subtype
    TYPE_AUDIO = 1;    // Sound, Audio Files
    TYPE_DOCUMENT = 2; // Document Files - PDF, Word, Excel, etc.
    TYPE_IMAGE = 3;    // Image Files
    TYPE_TEXT = 4;     // Text Based Files
    TYPE_VIDEO = 5;    // Video Files
    TYPE_URL = 6;      // URL Links
  }
}

// Basic Info Sent to Peers to Establish Connections
message Peer {
  string s_name = 1;       // User Sonr Domain
  Status status = 2;      // Peer Status
  Device device = 3;      // Peer Device Info
  Profile profile = 4;    // Peers General Information
  bytes public_key = 5;    // Public Key of the Peer
  string peer_id = 6;      // Peer ID
  int64 last_modified = 7; // Last Modified Timestamp

  // Peer Info for Device
  message Device {
    string id = 1;       // Peer Device ID
    string host_name = 2; // Peer Host Name
    string os = 3;       // Peer Operating System
    string arch = 4;     // Peer Architecture
    string model = 5;    // Peers Device Model
  }

  // Peers Active Status
  enum Status {
    STATUS_UNSPECIFIED = 0; // Offline - Not Online or Not a Full Node
    STATUS_ONLINE = 1;  // Online - Full Node Available
    STATUS_AWAY = 2;    // Away - Not Online, but has a full node
    STATUS_BUSY = 3;    // Busy - Online, but busy with Transfer
  }
}

// General Information about Peer passed during Authentication
message Profile {
  string s_name = 1;            // Sonr Based Username
  string first_name = 2;        // General Info
  string last_name = 3;         // General Info
  bytes picture = 4;           // Profile Picture
  string bio = 6;              // User Biography
  repeated Social socials = 7; // Social Media
  int64 last_modified = 8;      // Last Modified Timestamp
}

// List of Profiles for Persistent Store
message ProfileList {
  repeated Profile profiles = 1; // List of Profiles
  int64 created_at = 2;          // Creation Timestamp
  string key = 3;                // Key of the Payload List
  int64 last_modified = 4;       // Last Modified Timestamp
}

// Social Media Item Information
message Social {
  bool valid = 1;      // Whether this is a valid Social
  string username = 2; // Username of Social
  string url = 3;      // URL to Social
  bytes picture = 4;   // Profile Picture
  Media media = 5;     // Type of Social

  // Social Type
  enum Media {
    MEDIA_UNSPECIFIED = 0;     // Other Social Network
    MEDIA_FACEBOOK = 1;  // Facebook
    MEDIA_TWITTER = 2;   // Twitter
    MEDIA_MEDIUM = 3;    // Medium
    MEDIA_TIKTOK = 4;    // TikTok
    MEDIA_INSTAGRAM = 5; // Instagram
    MEDIA_YOUTUBE = 6;   // YouTube
    MEDIA_GITHUB = 7;    // GitHub
    MEDIA_SNAPCHAT = 8;  // Snapchat
    MEDIA_SPOTIFY = 9;   // Spotify
  }
}
